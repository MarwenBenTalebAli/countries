/*
 * Created on 2020-05-29 ( Time 14:26:45 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Countrylanguage;
import org.demo.bean.jpa.CountrylanguageEntity;
import org.demo.bean.jpa.CountrylanguageEntityKey;
import org.demo.business.service.mapping.CountrylanguageServiceMapper;
import org.demo.data.repository.jpa.CountrylanguageJpaRepository;
import org.demo.test.CountrylanguageFactoryForTest;
import org.demo.test.CountrylanguageEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of CountrylanguageService
 */
@RunWith(MockitoJUnitRunner.class)
public class CountrylanguageServiceImplTest {

	@InjectMocks
	private CountrylanguageServiceImpl countrylanguageService;
	@Mock
	private CountrylanguageJpaRepository countrylanguageJpaRepository;
	@Mock
	private CountrylanguageServiceMapper countrylanguageServiceMapper;
	
	private CountrylanguageFactoryForTest countrylanguageFactoryForTest = new CountrylanguageFactoryForTest();

	private CountrylanguageEntityFactoryForTest countrylanguageEntityFactoryForTest = new CountrylanguageEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String countrycode = mockValues.nextString(3);
		String language = mockValues.nextString(30);
		
		CountrylanguageEntityKey countrylanguageEntityKey = new CountrylanguageEntityKey(countrycode, language);
		countrylanguageEntityKey.setCountrycode(countrycode);
		countrylanguageEntityKey.setLanguage(language);
		
		CountrylanguageEntity countrylanguageEntity = countrylanguageJpaRepository.findOne(countrylanguageEntityKey);
		
		Countrylanguage countrylanguage = countrylanguageFactoryForTest.newCountrylanguage();
		when(countrylanguageServiceMapper.mapCountrylanguageEntityToCountrylanguage(countrylanguageEntity)).thenReturn(countrylanguage);

		// When
		Countrylanguage countrylanguageFound = countrylanguageService.findById(countrycode, language);

		// Then
		assertEquals(countrylanguage.getCountrycode(),countrylanguageFound.getCountrycode());
		assertEquals(countrylanguage.getLanguage(),countrylanguageFound.getLanguage());
	}

	@Test
	public void findAll() {
		// Given
		List<CountrylanguageEntity> countrylanguageEntitys = new ArrayList<CountrylanguageEntity>();
		CountrylanguageEntity countrylanguageEntity1 = countrylanguageEntityFactoryForTest.newCountrylanguageEntity();
		countrylanguageEntitys.add(countrylanguageEntity1);
		CountrylanguageEntity countrylanguageEntity2 = countrylanguageEntityFactoryForTest.newCountrylanguageEntity();
		countrylanguageEntitys.add(countrylanguageEntity2);
		when(countrylanguageJpaRepository.findAll()).thenReturn(countrylanguageEntitys);
		
		Countrylanguage countrylanguage1 = countrylanguageFactoryForTest.newCountrylanguage();
		when(countrylanguageServiceMapper.mapCountrylanguageEntityToCountrylanguage(countrylanguageEntity1)).thenReturn(countrylanguage1);
		Countrylanguage countrylanguage2 = countrylanguageFactoryForTest.newCountrylanguage();
		when(countrylanguageServiceMapper.mapCountrylanguageEntityToCountrylanguage(countrylanguageEntity2)).thenReturn(countrylanguage2);

		// When
		List<Countrylanguage> countrylanguagesFounds = countrylanguageService.findAll();

		// Then
		assertTrue(countrylanguage1 == countrylanguagesFounds.get(0));
		assertTrue(countrylanguage2 == countrylanguagesFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Countrylanguage countrylanguage = countrylanguageFactoryForTest.newCountrylanguage();

		CountrylanguageEntityKey id = new CountrylanguageEntityKey(countrylanguage.getCountrycode(), countrylanguage.getLanguage());
		CountrylanguageEntity countrylanguageEntity = countrylanguageEntityFactoryForTest.newCountrylanguageEntity();
		when(countrylanguageJpaRepository.findOne(id)).thenReturn(null);
		
		countrylanguageEntity = new CountrylanguageEntity();
		countrylanguageServiceMapper.mapCountrylanguageToCountrylanguageEntity(countrylanguage, countrylanguageEntity);
		CountrylanguageEntity countrylanguageEntitySaved = countrylanguageJpaRepository.save(countrylanguageEntity);
		
		Countrylanguage countrylanguageSaved = countrylanguageFactoryForTest.newCountrylanguage();
		when(countrylanguageServiceMapper.mapCountrylanguageEntityToCountrylanguage(countrylanguageEntitySaved)).thenReturn(countrylanguageSaved);

		// When
		Countrylanguage countrylanguageResult = countrylanguageService.create(countrylanguage);

		// Then
		assertTrue(countrylanguageResult == countrylanguageSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Countrylanguage countrylanguage = countrylanguageFactoryForTest.newCountrylanguage();

		CountrylanguageEntityKey id = new CountrylanguageEntityKey(countrylanguage.getCountrycode(), countrylanguage.getLanguage());
		CountrylanguageEntity countrylanguageEntity = countrylanguageEntityFactoryForTest.newCountrylanguageEntity();
		when(countrylanguageJpaRepository.findOne(id)).thenReturn(countrylanguageEntity);

		// When
		Exception exception = null;
		try {
			countrylanguageService.create(countrylanguage);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Countrylanguage countrylanguage = countrylanguageFactoryForTest.newCountrylanguage();

		CountrylanguageEntityKey id = new CountrylanguageEntityKey(countrylanguage.getCountrycode(), countrylanguage.getLanguage());
		CountrylanguageEntity countrylanguageEntity = countrylanguageEntityFactoryForTest.newCountrylanguageEntity();
		when(countrylanguageJpaRepository.findOne(id)).thenReturn(countrylanguageEntity);
		
		CountrylanguageEntity countrylanguageEntitySaved = countrylanguageEntityFactoryForTest.newCountrylanguageEntity();
		when(countrylanguageJpaRepository.save(countrylanguageEntity)).thenReturn(countrylanguageEntitySaved);
		
		Countrylanguage countrylanguageSaved = countrylanguageFactoryForTest.newCountrylanguage();
		when(countrylanguageServiceMapper.mapCountrylanguageEntityToCountrylanguage(countrylanguageEntitySaved)).thenReturn(countrylanguageSaved);

		// When
		Countrylanguage countrylanguageResult = countrylanguageService.update(countrylanguage);

		// Then
		verify(countrylanguageServiceMapper).mapCountrylanguageToCountrylanguageEntity(countrylanguage, countrylanguageEntity);
		assertTrue(countrylanguageResult == countrylanguageSaved);
	}

	@Test
	public void delete() {
		// Given
		String countrycode = mockValues.nextString(3);
		String language = mockValues.nextString(30);
		CountrylanguageEntityKey countrylanguageEntityKey = new CountrylanguageEntityKey(countrycode, language);

		// When
		countrylanguageService.delete(countrycode, language);

		// Then
		verify(countrylanguageJpaRepository).delete(countrylanguageEntityKey);
		
	}

}
