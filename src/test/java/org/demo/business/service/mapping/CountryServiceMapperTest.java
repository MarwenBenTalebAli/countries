/*
 * Created on 2020-05-29 ( Time 14:26:45 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
package org.demo.business.service.mapping;

import static org.junit.Assert.assertEquals;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.demo.bean.Country;
import org.demo.bean.jpa.CountryEntity;
import org.demo.test.MockValues;

/**
 * Test : Mapping between entity beans and display beans.
 */
public class CountryServiceMapperTest {

	private CountryServiceMapper countryServiceMapper;

	private static ModelMapper modelMapper = new ModelMapper();

	private MockValues mockValues = new MockValues();
	
	
	@BeforeClass
	public static void setUp() {
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}
	
	@Before
	public void before() {
		countryServiceMapper = new CountryServiceMapper();
		countryServiceMapper.setModelMapper(modelMapper);
	}
	
	/**
	 * Mapping from 'CountryEntity' to 'Country'
	 * @param countryEntity
	 */
	@Test
	public void testMapCountryEntityToCountry() {
		// Given
		CountryEntity countryEntity = new CountryEntity();
		countryEntity.setName(mockValues.nextString(52));
		countryEntity.setContinent(mockValues.nextString(13));
		countryEntity.setRegion(mockValues.nextString(26));
		countryEntity.setSurfacearea(mockValues.nextFloat());
		countryEntity.setIndepyear(mockValues.nextShort());
		countryEntity.setPopulation(mockValues.nextInteger());
		countryEntity.setLifeexpectancy(mockValues.nextFloat());
		countryEntity.setGnp(mockValues.nextFloat());
		countryEntity.setGnpold(mockValues.nextFloat());
		countryEntity.setLocalname(mockValues.nextString(45));
		countryEntity.setGovernmentform(mockValues.nextString(45));
		countryEntity.setHeadofstate(mockValues.nextString(60));
		countryEntity.setCapital(mockValues.nextInteger());
		countryEntity.setCode2(mockValues.nextString(2));
		
		// When
		Country country = countryServiceMapper.mapCountryEntityToCountry(countryEntity);
		
		// Then
		assertEquals(countryEntity.getName(), country.getName());
		assertEquals(countryEntity.getContinent(), country.getContinent());
		assertEquals(countryEntity.getRegion(), country.getRegion());
		assertEquals(countryEntity.getSurfacearea(), country.getSurfacearea());
		assertEquals(countryEntity.getIndepyear(), country.getIndepyear());
		assertEquals(countryEntity.getPopulation(), country.getPopulation());
		assertEquals(countryEntity.getLifeexpectancy(), country.getLifeexpectancy());
		assertEquals(countryEntity.getGnp(), country.getGnp());
		assertEquals(countryEntity.getGnpold(), country.getGnpold());
		assertEquals(countryEntity.getLocalname(), country.getLocalname());
		assertEquals(countryEntity.getGovernmentform(), country.getGovernmentform());
		assertEquals(countryEntity.getHeadofstate(), country.getHeadofstate());
		assertEquals(countryEntity.getCapital(), country.getCapital());
		assertEquals(countryEntity.getCode2(), country.getCode2());
	}
	
	/**
	 * Test : Mapping from 'Country' to 'CountryEntity'
	 */
	@Test
	public void testMapCountryToCountryEntity() {
		// Given
		Country country = new Country();
		country.setName(mockValues.nextString(52));
		country.setContinent(mockValues.nextString(13));
		country.setRegion(mockValues.nextString(26));
		country.setSurfacearea(mockValues.nextFloat());
		country.setIndepyear(mockValues.nextShort());
		country.setPopulation(mockValues.nextInteger());
		country.setLifeexpectancy(mockValues.nextFloat());
		country.setGnp(mockValues.nextFloat());
		country.setGnpold(mockValues.nextFloat());
		country.setLocalname(mockValues.nextString(45));
		country.setGovernmentform(mockValues.nextString(45));
		country.setHeadofstate(mockValues.nextString(60));
		country.setCapital(mockValues.nextInteger());
		country.setCode2(mockValues.nextString(2));

		CountryEntity countryEntity = new CountryEntity();
		
		// When
		countryServiceMapper.mapCountryToCountryEntity(country, countryEntity);
		
		// Then
		assertEquals(country.getName(), countryEntity.getName());
		assertEquals(country.getContinent(), countryEntity.getContinent());
		assertEquals(country.getRegion(), countryEntity.getRegion());
		assertEquals(country.getSurfacearea(), countryEntity.getSurfacearea());
		assertEquals(country.getIndepyear(), countryEntity.getIndepyear());
		assertEquals(country.getPopulation(), countryEntity.getPopulation());
		assertEquals(country.getLifeexpectancy(), countryEntity.getLifeexpectancy());
		assertEquals(country.getGnp(), countryEntity.getGnp());
		assertEquals(country.getGnpold(), countryEntity.getGnpold());
		assertEquals(country.getLocalname(), countryEntity.getLocalname());
		assertEquals(country.getGovernmentform(), countryEntity.getGovernmentform());
		assertEquals(country.getHeadofstate(), countryEntity.getHeadofstate());
		assertEquals(country.getCapital(), countryEntity.getCapital());
		assertEquals(country.getCode2(), countryEntity.getCode2());
	}

}