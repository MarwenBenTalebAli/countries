/*
 * Created on 2020-05-29 ( Time 14:26:37 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.demo.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "country"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="country", catalog="world" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="CountryEntity.countAll", query="SELECT COUNT(x) FROM CountryEntity x" )
} )
public class CountryEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @Column(name="Code", nullable=false, length=3)
    private String     code         ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="Name", nullable=false, length=52)
    private String     name         ;

    @Column(name="Continent", nullable=false, length=13)
    private String     continent    ;

    @Column(name="Region", nullable=false, length=26)
    private String     region       ;

    @Column(name="SurfaceArea", nullable=false)
    private Float      surfacearea  ;

    @Column(name="IndepYear")
    private Short      indepyear    ;

    @Column(name="Population", nullable=false)
    private Integer    population   ;

    @Column(name="LifeExpectancy")
    private Float      lifeexpectancy ;

    @Column(name="GNP")
    private Float      gnp          ;

    @Column(name="GNPOld")
    private Float      gnpold       ;

    @Column(name="LocalName", nullable=false, length=45)
    private String     localname    ;

    @Column(name="GovernmentForm", nullable=false, length=45)
    private String     governmentform ;

    @Column(name="HeadOfState", length=60)
    private String     headofstate  ;

    @Column(name="Capital")
    private Integer    capital      ;

    @Column(name="Code2", nullable=false, length=2)
    private String     code2        ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="country", targetEntity=CityEntity.class)
    private List<CityEntity> listOfCity  ;

    @OneToMany(mappedBy="country", targetEntity=CountrylanguageEntity.class)
    private List<CountrylanguageEntity> listOfCountrylanguage;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public CountryEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setCode( String code ) {
        this.code = code ;
    }
    public String getCode() {
        return this.code;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : Name ( CHAR ) 
    public void setName( String name ) {
        this.name = name;
    }
    public String getName() {
        return this.name;
    }

    //--- DATABASE MAPPING : Continent ( ENUM ) 
    public void setContinent( String continent ) {
        this.continent = continent;
    }
    public String getContinent() {
        return this.continent;
    }

    //--- DATABASE MAPPING : Region ( CHAR ) 
    public void setRegion( String region ) {
        this.region = region;
    }
    public String getRegion() {
        return this.region;
    }

    //--- DATABASE MAPPING : SurfaceArea ( FLOAT ) 
    public void setSurfacearea( Float surfacearea ) {
        this.surfacearea = surfacearea;
    }
    public Float getSurfacearea() {
        return this.surfacearea;
    }

    //--- DATABASE MAPPING : IndepYear ( SMALLINT ) 
    public void setIndepyear( Short indepyear ) {
        this.indepyear = indepyear;
    }
    public Short getIndepyear() {
        return this.indepyear;
    }

    //--- DATABASE MAPPING : Population ( INT ) 
    public void setPopulation( Integer population ) {
        this.population = population;
    }
    public Integer getPopulation() {
        return this.population;
    }

    //--- DATABASE MAPPING : LifeExpectancy ( FLOAT ) 
    public void setLifeexpectancy( Float lifeexpectancy ) {
        this.lifeexpectancy = lifeexpectancy;
    }
    public Float getLifeexpectancy() {
        return this.lifeexpectancy;
    }

    //--- DATABASE MAPPING : GNP ( FLOAT ) 
    public void setGnp( Float gnp ) {
        this.gnp = gnp;
    }
    public Float getGnp() {
        return this.gnp;
    }

    //--- DATABASE MAPPING : GNPOld ( FLOAT ) 
    public void setGnpold( Float gnpold ) {
        this.gnpold = gnpold;
    }
    public Float getGnpold() {
        return this.gnpold;
    }

    //--- DATABASE MAPPING : LocalName ( CHAR ) 
    public void setLocalname( String localname ) {
        this.localname = localname;
    }
    public String getLocalname() {
        return this.localname;
    }

    //--- DATABASE MAPPING : GovernmentForm ( CHAR ) 
    public void setGovernmentform( String governmentform ) {
        this.governmentform = governmentform;
    }
    public String getGovernmentform() {
        return this.governmentform;
    }

    //--- DATABASE MAPPING : HeadOfState ( CHAR ) 
    public void setHeadofstate( String headofstate ) {
        this.headofstate = headofstate;
    }
    public String getHeadofstate() {
        return this.headofstate;
    }

    //--- DATABASE MAPPING : Capital ( INT ) 
    public void setCapital( Integer capital ) {
        this.capital = capital;
    }
    public Integer getCapital() {
        return this.capital;
    }

    //--- DATABASE MAPPING : Code2 ( CHAR ) 
    public void setCode2( String code2 ) {
        this.code2 = code2;
    }
    public String getCode2() {
        return this.code2;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfCity( List<CityEntity> listOfCity ) {
        this.listOfCity = listOfCity;
    }
    public List<CityEntity> getListOfCity() {
        return this.listOfCity;
    }

    public void setListOfCountrylanguage( List<CountrylanguageEntity> listOfCountrylanguage ) {
        this.listOfCountrylanguage = listOfCountrylanguage;
    }
    public List<CountrylanguageEntity> getListOfCountrylanguage() {
        return this.listOfCountrylanguage;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(code);
        sb.append("]:"); 
        sb.append(name);
        sb.append("|");
        sb.append(continent);
        sb.append("|");
        sb.append(region);
        sb.append("|");
        sb.append(surfacearea);
        sb.append("|");
        sb.append(indepyear);
        sb.append("|");
        sb.append(population);
        sb.append("|");
        sb.append(lifeexpectancy);
        sb.append("|");
        sb.append(gnp);
        sb.append("|");
        sb.append(gnpold);
        sb.append("|");
        sb.append(localname);
        sb.append("|");
        sb.append(governmentform);
        sb.append("|");
        sb.append(headofstate);
        sb.append("|");
        sb.append(capital);
        sb.append("|");
        sb.append(code2);
        return sb.toString(); 
    } 

}
