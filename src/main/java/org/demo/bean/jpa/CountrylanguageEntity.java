/*
 * Created on 2020-05-29 ( Time 14:26:38 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
// This Bean has a composite Primary Key  


package org.demo.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;


import javax.persistence.*;

/**
 * Persistent class for entity stored in table "countrylanguage"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="countrylanguage", catalog="world" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="CountrylanguageEntity.countAll", query="SELECT COUNT(x) FROM CountrylanguageEntity x" )
} )
public class CountrylanguageEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private CountrylanguageEntityKey compositePrimaryKey ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="IsOfficial", nullable=false, length=1)
    private String     isofficial   ;

    @Column(name="Percentage", nullable=false)
    private Float      percentage   ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="CountryCode", referencedColumnName="Code", insertable=false, updatable=false)
    private CountryEntity country     ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public CountrylanguageEntity() {
		super();
		this.compositePrimaryKey = new CountrylanguageEntityKey();       
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
    public void setCountrycode( String countrycode ) {
        this.compositePrimaryKey.setCountrycode( countrycode ) ;
    }
    public String getCountrycode() {
        return this.compositePrimaryKey.getCountrycode() ;
    }
    public void setLanguage( String language ) {
        this.compositePrimaryKey.setLanguage( language ) ;
    }
    public String getLanguage() {
        return this.compositePrimaryKey.getLanguage() ;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : IsOfficial ( ENUM ) 
    public void setIsofficial( String isofficial ) {
        this.isofficial = isofficial;
    }
    public String getIsofficial() {
        return this.isofficial;
    }

    //--- DATABASE MAPPING : Percentage ( FLOAT ) 
    public void setPercentage( Float percentage ) {
        this.percentage = percentage;
    }
    public Float getPercentage() {
        return this.percentage;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setCountry( CountryEntity country ) {
        this.country = country;
    }
    public CountryEntity getCountry() {
        return this.country;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        if ( compositePrimaryKey != null ) {  
            sb.append(compositePrimaryKey.toString());  
        }  
        else {  
            sb.append( "(null-key)" ); 
        }  
        sb.append("]:"); 
        sb.append(isofficial);
        sb.append("|");
        sb.append(percentage);
        return sb.toString(); 
    } 

}
