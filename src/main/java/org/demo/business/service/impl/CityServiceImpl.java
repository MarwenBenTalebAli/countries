/*
 * Created on 2020-05-29 ( Time 14:26:45 )
 * Generated by Telosys Tools Generator ( version 3.1.2 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.City;
import org.demo.bean.jpa.CityEntity;
import org.demo.business.service.CityService;
import org.demo.business.service.mapping.CityServiceMapper;
import org.demo.data.repository.jpa.CityJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CityService
 */
@Component
@Transactional
public class CityServiceImpl implements CityService {

	@Resource
	private CityJpaRepository cityJpaRepository;

	@Resource
	private CityServiceMapper cityServiceMapper;
	
	@Override
	public City findById(Integer id) {
		CityEntity cityEntity = cityJpaRepository.findOne(id);
		return cityServiceMapper.mapCityEntityToCity(cityEntity);
	}

	@Override
	public List<City> findAll() {
		Iterable<CityEntity> entities = cityJpaRepository.findAll();
		List<City> beans = new ArrayList<City>();
		for(CityEntity cityEntity : entities) {
			beans.add(cityServiceMapper.mapCityEntityToCity(cityEntity));
		}
		return beans;
	}

	@Override
	public City save(City city) {
		return update(city) ;
	}

	@Override
	public City create(City city) {
		CityEntity cityEntity = cityJpaRepository.findOne(city.getId());
		if( cityEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		cityEntity = new CityEntity();
		cityServiceMapper.mapCityToCityEntity(city, cityEntity);
		CityEntity cityEntitySaved = cityJpaRepository.save(cityEntity);
		return cityServiceMapper.mapCityEntityToCity(cityEntitySaved);
	}

	@Override
	public City update(City city) {
		CityEntity cityEntity = cityJpaRepository.findOne(city.getId());
		cityServiceMapper.mapCityToCityEntity(city, cityEntity);
		CityEntity cityEntitySaved = cityJpaRepository.save(cityEntity);
		return cityServiceMapper.mapCityEntityToCity(cityEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		cityJpaRepository.delete(id);
	}

	public CityJpaRepository getCityJpaRepository() {
		return cityJpaRepository;
	}

	public void setCityJpaRepository(CityJpaRepository cityJpaRepository) {
		this.cityJpaRepository = cityJpaRepository;
	}

	public CityServiceMapper getCityServiceMapper() {
		return cityServiceMapper;
	}

	public void setCityServiceMapper(CityServiceMapper cityServiceMapper) {
		this.cityServiceMapper = cityServiceMapper;
	}

}
